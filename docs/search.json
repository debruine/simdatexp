[
  {
    "objectID": "testing.html",
    "href": "testing.html",
    "title": "Testing",
    "section": "",
    "text": "library(faux)     # for multilevel data simulation\nlibrary(dplyr)    # for data manipulation\nlibrary(ggplot2)  # for plotting\nlibrary(ggridges) # for ridge plots\nlibrary(patchwork) # for combining plots\nlibrary(purrr)    # for iteration\nlibrary(broom)    # for tabular model output\n\nset.seed(8675309) # to make simulation reproducible\ntheme_set(theme_minimal())\nUsing simulation to create unit tests for a code base or statistical method."
  },
  {
    "objectID": "testing.html#example",
    "href": "testing.html#example",
    "title": "Testing",
    "section": "Example",
    "text": "Example\nCreate data where you know the ground truth in order to, for example, check the false positive rate of a statistical test.\n\nSimulate Data\nSimulate data with a multilevel structure. Here, face_n faces are rated by rater_n raters for height. Some faces tend to look taller or shorter than they are (this face bias has a normal distribution with a mean of 0 and SD of face_b0_sd) and raters tend to over- or under-estimate (this rater bias has a normal distribution with a mean of 0 and SD of rater_b0_sd). People are pretty bad at estimating height from faces, so there’s a lot of error (represented by sigma). Faces have even or odd birth dates, but there is no actual effect of birthday (bday_effect = 0).\n\n# this function returns a simulated dataset with the specified parameters\nsimdat &lt;- function(face_n = 20,\n                   rater_n = 20,\n                   face_b0_sd = 10,\n                   rater_b0_sd = 10,\n                   sigma = 20,\n                   bday_effect = 0) {\n\n  heights &lt;- rnorm(face_n, 130, 20) |&gt; round()\n\n  data &lt;- add_random(face = face_n) |&gt;\n    mutate(height = heights) |&gt;\n    add_between(\"face\", birthday = c(\"even\", \"odd\")) |&gt;\n    add_contrast(\"birthday\", colnames = \"bday\") |&gt;\n    add_random(rater = rater_n) |&gt;\n    add_ranef(\"rater\", b0_r = rater_b0_sd) |&gt;\n    add_ranef(\"face\", b0_f = face_b0_sd) |&gt;\n    add_ranef(err = sigma) |&gt;\n    mutate(est_height = height + b0_r + b0_f + err + \n             (bday * bday_effect),\n           est_height = round(est_height)) |&gt;\n    select(-b0_r, -b0_f, -err)\n  \n  return(data)\n}\n\n\nsimdat() |&gt; head()\n\n# A tibble: 6 × 6\n  face   height birthday  bday rater   est_height\n  &lt;chr&gt;   &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;\n1 face01    110 even      -0.5 rater01        155\n2 face01    110 even      -0.5 rater02        115\n3 face01    110 even      -0.5 rater03         96\n4 face01    110 even      -0.5 rater04         75\n5 face01    110 even      -0.5 rater05         97\n6 face01    110 even      -0.5 rater06        128\n\n\n\nggplot(simdat(), aes(x = est_height, y = face, fill = face)) +\n  geom_density_ridges(alpha = 0.2, scale = 1) +\n  geom_point(aes(x = height, color = face), size = 2, \n             position = position_nudge(y = .2)) +\n  labs(x = \"Estimated height\", y = NULL) +\n  theme(legend.position = \"none\")\n\nPicking joint bandwidth of 10.2\n\n\n\n\n\n\n\nAggregate Data\n\n# this function aggregates data by FACE\naggface &lt;- function(data) {\n  data |&gt;\n    group_by(face, height, birthday) |&gt;\n    summarise(mean_est_height = mean(est_height),\n              sem = sqrt(var(est_height)/length(est_height)),\n              .groups = \"drop\")\n}\n\n\nsimdat() |&gt; aggface() |&gt; head()\n\n# A tibble: 6 × 5\n  face   height birthday mean_est_height   sem\n  &lt;chr&gt;   &lt;dbl&gt; &lt;fct&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 face01    124 even               132.   6.13\n2 face02     80 odd                 78.2  4.67\n3 face03     89 even                77.7  4.41\n4 face04    138 odd                128.   4.49\n5 face05    127 even               122.   4.58\n6 face06    128 odd                123.   5.93\n\n\n\n# this function aggregates data by RATER\naggrater &lt;- function(data) {\n  data |&gt;\n    group_by(rater, birthday) |&gt;\n    summarise(mean_est_height = mean(est_height),\n              sem = sqrt(var(est_height)/length(est_height)),\n              .groups = \"drop\")\n}\n\n\nsimdat() |&gt; aggrater() |&gt; head()\n\n# A tibble: 6 × 4\n  rater   birthday mean_est_height   sem\n  &lt;chr&gt;   &lt;fct&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 rater01 even                137.  7.85\n2 rater01 odd                 133.  7.61\n3 rater02 even                130.  8.94\n4 rater02 odd                 138. 13.7 \n5 rater03 even                150.  5.68\n6 rater03 odd                 159.  7.42\n\n\n\n\nPlot Data\n\nsimdat() |&gt;\n  aggface() |&gt;\n  ggplot(aes(x = height, y = mean_est_height, color = birthday)) +\n  geom_abline(slope = 1, intercept = 0, color = \"grey\") +\n  geom_smooth(aes(group = birthday),\n              method = lm, formula = y ~ x,\n              se = FALSE, linewidth = 0.7) +\n  geom_pointrange(aes(group = face,\n                      ymin = mean_est_height - sem,\n                      ymax = mean_est_height + sem),\n                  size = 0.3, alpha = 0.5) +\n  coord_cartesian(xlim = c(50, 200), ylim = c(50, 200)) +\n  labs(title = \"Aggregated by Face\",\n       x = \"Actual height\",\n       y = \"Estimated Height (mean ± SE)\") +\n  theme(legend.position = c(.1, .8))\n\n\n\n\n\n# this function plots the aggregated data \nplotagg &lt;- function(data, title = \"\") {\n  data |&gt;\n    ggplot(aes(x = birthday, y = mean_est_height, fill = birthday)) +\n    geom_violin(alpha = 0.5) +\n    stat_summary(fun.data = mean_se) +\n    labs(title = title,\n         y = \"Estimated Height (mean ± SE)\") +\n    theme(legend.position = \"none\")\n}\n\n\nplotboth &lt;- function(data) {\n  f &lt;- aggface(data) \n  fplot &lt;- plotagg(f, \"Aggregated by Face\")\n  r &lt;- aggrater(data)\n  rplot &lt;- plotagg(r, \"Aggregated by Rater\")\n  \n  # get plots on the same y-axis range\n  heights &lt;- c(f$mean_est_height, r$mean_est_height)\n  minh &lt;- (min(heights)/10) |&gt; floor()*10\n  maxh &lt;- (max(heights)/10) |&gt; ceiling()*10\n  \n  fplot + rplot & coord_cartesian(ylim = c(minh, maxh))\n}\n\n\nsimdat() |&gt; plotboth()\n\n\n\n\nMore error variability\n\nsimdat(sigma = 50) |&gt; plotboth()\n\n\n\n\nMore raters\n\nsimdat(rater_n = 200) |&gt; plotboth()\n\n\n\n\nMore between-face variability\n\nsimdat(face_b0_sd = 30) |&gt; plotboth()\n\n\n\n\nInduce an effect of birthday, where people born on odd days are 10cm taller than those born on even days.\n\nsimdat(bday_effect = 10) |&gt; plotboth()\n\n\n\n\n\n\nAnalyse Data\nRun a t-test on the data.\n\nttest &lt;- function(data) {\n  t.test(mean_est_height ~ birthday, \n         data = data, \n         paired = TRUE) |&gt;\n    broom::tidy()\n}\n\nSimulate data\n\nd &lt;- simdat()\n\nAggregate by face and test\n\nd |&gt; aggface() |&gt; ttest()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1     1.85     0.128   0.901         9    -31.0      34.7 Paired t-… two.sided  \n\n\nAggregate by rater and test\n\nd |&gt; aggrater() |&gt; ttest()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1     1.86     0.898   0.381        19    -2.47      6.18 Paired t-… two.sided  \n\n\n\n\nRepeat\nIf a test has a nominal false positive rate, the power (i.e., the percent of false positives when there is no effect) should be (about) the same as the alpha cutoff. This is because p-values are uniformly distributed when there is no effect.\n\n# run a t.test on values from the same distribution\n# 10000 time and plot the distribution of p-values\np &lt;- replicate(10000, t.test(rnorm(10), rnorm(10))$p.value)\nhist(p)\n\n\n\n\nWe’ll use the psychology default value of 0.05 for alpha here.\n\nalpha &lt;- 0.05\n\nRun your data simulation 100 times, aggregating by face, and calculate the false positive rate, which should be about the same as alpha.\n\nsimresults &lt;- map_df(1:100, ~simdat() |&gt; aggface() |&gt; ttest())\n\nmean(simresults$p.value &lt; alpha)\n\n[1] 0.03\n\n\nRun 100 times aggregating by rater. The false positive rate is very high.\n\nsimresults &lt;- map_df(1:100, ~simdat() |&gt; aggrater() |&gt; ttest())\n\nmean(simresults$p.value &lt; alpha)\n\n[1] 0.71\n\n\nWhat if there are more raters?\n\nsimresults200 &lt;-map_df(1:100, ~simdat(rater_n = 200) |&gt; \n                         aggrater() |&gt; ttest())\n\nmean(simresults200$p.value &lt; alpha)\n\n[1] 0.87"
  },
  {
    "objectID": "reproducibility.html",
    "href": "reproducibility.html",
    "title": "Reproducibility",
    "section": "",
    "text": "Using simulation to create reproducible workflows (e.g., for sensitive data).\nlibrary(faux)\n\n\n************\nWelcome to faux. For support and examples visit:\nhttps://debruine.github.io/faux/\n- Get and set global package options with: faux_options()\n************\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)"
  },
  {
    "objectID": "reproducibility.html#simple-example-with-faux",
    "href": "reproducibility.html#simple-example-with-faux",
    "title": "Reproducibility",
    "section": "Simple Example with Faux",
    "text": "Simple Example with Faux\n\niris |&gt;\n  mutate(id = row_number()) |&gt;\n  pivot_longer(Sepal.Length:Petal.Width) |&gt;\n  ggplot(aes(x = name, y = value, color = Species, fill = Species)) +\n  geom_boxplot(alpha = 0.2)\n\n\n\n\n\nsimiris &lt;- sim_df(iris, n = 50, between = \"Species\")\n\n\nsimiris |&gt;\n  mutate(id = row_number()) |&gt;\n  pivot_longer(Sepal.Length:Petal.Width) |&gt;\n  ggplot(aes(x = name, y = value, color = Species, fill = Species)) +\n  geom_boxplot(alpha = 0.2)"
  },
  {
    "objectID": "reproducibility.html#more-complex-example-wit-synthpop",
    "href": "reproducibility.html#more-complex-example-wit-synthpop",
    "title": "Reproducibility",
    "section": "More Complex Example wit Synthpop",
    "text": "More Complex Example wit Synthpop\nTo DO"
  }
]